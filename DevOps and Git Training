Week: 5 & 6

DevOps 

DevOps culture, principles, and practices

                     ============= I1==================== =========== I2 ==================== =========== I3 ================
Agile       =  Plan + code + Implementation + Deployment + code + Implementation + Deployment + code + Implementation + Deployment + Monitoring + go live

DevOps  =  Plan + code + Implementation + Deployment + Monitoring + Plan + code + Implementation + Deployment + Monitoring + Plan + code + Implementation + Deployment + Monitoring
           ============I1 ======================================== =====================I2 ===============================

DevOps = Agile + Open source Automation tools 

Quick delivery
Eliminates waste from project
Accuracy
Customer satisfaction / Business improvment

Engineering services:

1. Server Engineering 2. Database Engineering 3. Network Engineering 4. Application Engineering 5. Storage Engineering 6. Security Engineering


==============================================

DevOps Tools:

1. Ansible, Chef , Puppet                    - Deployment & Configuration mgmt tool 

2. GIT  (Source code management tool)        -  Version control system                        - 

3. Terraform                                 - Env Build tool  (IAC) Infra as a code 

4. Jenkins                                   - Integration tool 

6. K8S 										- container management tool - 

7. Docker									- container services 

10. DataDog, Splunk, AppD, Prometheus, Grafana. New Relic 


AWS - Cloud service - Infrastructure 

AWS - Infra
Devops - Implementation 

Devops = Bridge between Delivery business unit and Dev business unit 


========================================

Git - Version Control system

Github - Web based GIT repo 


Version control system = They are process management system while maintain changes recorded in a file or set of file over a period of time.

https://www.javatpoint.com/git-version-control-system

A version control system is a software that tracks changes to a file or set of files over time so that you can recall specific versions later. It also allows you to work together with other programmers.

The version control system is a collection of software tools that help a team to manage changes in a source code. It uses a special kind of database to keep track of every modification to the code.

Developers can compare earlier versions of the code with an older version to fix the mistakes.

Benefits:

Complete change history of the file
Simultaneously working
Branching and merging
Traceability

Types:

Localized version Control System:

The localized version control method is a common approach because of its simplicity. But this approach leads to a higher chance of error. In this approach, you may forget which directory you're in and accidentally write to the wrong file or copy over files you don't want to.

To deal with this issue, programmers developed local VCSs that had a simple database. Such databases kept all the changes to files under revision control. A local version control system keeps local copies of the files.

The major drawback of Local VCS is that it has a single point of failure.


Centralized version control systems:

The developers needed to collaborate with other developers on other systems. The localized version control system failed in this case. To deal with this problem, Centralized Version Control Systems were developed.

Centralized version control systems have many benefits, especially over local VCSs.

Everyone on the system has information about the work what others are doing on the project.
Administrators have control over other developers.
It is easier to deal with a centralized version control system than a localized version control system.
A local version control system facilitates with a server software component which stores and manages the different versions of the files.

Distributed version control systems:

Centralized Version Control System uses a central server to store all the database and team collaboration. But due to single point failure, which means the failure of the central server, developers do not prefer it. Next, the Distributed Version Control System is developed.

In a Distributed Version Control System (such as Git, Mercurial, Bazaar or Darcs), the user has a local copy of a repository. So, the clients don't just check out the latest snapshot of the files even they can fully mirror the repository. The local repository contains all the files and metadata present in the main repository.

====================================================

Git is a distributed version control system that enables software development teams to have multiple local copies of the project's codebase independent of each other. These copies, or branches, can be created, merged, and deleted quickly, empowering teams to experiment, with little compute cost, before merging into the main branch (sometimes referred to as the master branch). Git is known for its speed, workflow compatibility, and open source foundation.

Most Git actions only add data to the database, and Git makes it easy to undo changes during the three main states.

Git has three file states: modified, staged, and committed.

1. A modified file has been changed but isn't committed to the database yet.

2.  staged file is set to go into the next commit.

3. When a file is committed, the data has been stored in the database.

With Git, software teams can experiment without fearing that they'll create lasting damage to the source code, because teams can always revert to a previous version if there are any problems.



========================================================
Creating GIThub account -> creating new repo 

Basic requirements:

1. Download GIT software for Windows. 
2. Download VSC 
3. Github sign in 

Command prompt: git config --global user.name "Shivoffline"
				git config --global user.email "sivaprasad1393@gmail.com"
				
GIT flow:

Working directory U = Local machine

Staging Area A = BUffer location/Parking area

LOcal repository = (.GIT) 

Remote repository = Github/gitlab/bitbucket 
				
Task 

1. Cloning file from github to VSC. -> git clone  (Clone entire repo)

    Created File2.txt in VSC -> git status  -> Untracked file U (Working Dir)
	
	git add File2.txt -> git status -> Staging area A 
	
	git commit -m "message"  -> Pushed to Local repo (.GIT)
	
	git push origin main -> Pushed to Remote repo (Github)
	

				Any File in VSC: 
				
				Insert/Modify -> Add -> Commit -> Push 
				
2.  In File2.txt , i have added a first line, so the status shows as M (Modified)
     so we need to follow the same process as above. 
	 
					Add -> Commit -> Push 
					
3. I have deleted File2.txt. you can view the deleted status using git status command

		now we need to make the changes in remote repo, so add and commit the changes to push to remote repo.
		
		Add File2.txt -> Commit -> Push main origin 
		
4. If we are making any changes in Github by creating or modifying any file, you can use git pull command to fetch all the changes. 

5. Created a new folder Tasknew with file name index.html

   git status won't work because git is not initialized in Tasknew folder. (.git folder is not inside Tasknew)
   
   git init  -> initialize git within Tasknew
   
   
6. Tried git push origin main command .. Doesn't works. so created a new repo with name Tasknew 

git remote push origin <link>

src doesn't match any.

git branch   -> *master            we need to change the branch name from master to main

git branch -M main                

now trying git push origin main command, index.html file will be moved to Tasknew github repo. 

git log 
git log --oneline   -> To check the commit details 

===================================

Branching & Merging: 

https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging


First, i have created a branch1 (Feature branch)

git pull command 

git branch <newbranchname>   -> To create a new branch 

git branch -a   -> command shows branch details   

git checkout branch1   ->   * branch1 (To switch between branches)

Then, i have created a new file named branch1.txt and pushed to Remote repo

git push origin branch1 

Anyway, the changes wont reflect in main branch. 

branch1.txt file will be visible only in branch1   -> You need to merge feature branch with main branch 

git merge branch1    -> git push origin main 

Merge - Wont directly merge Feature branch with main branch -> Pull Request 


main

branch1, branch2, branch3 ------ branchn = Feature branch 

===================

Pull Request: 

https://www.atlassian.com/git/tutorials/making-a-pull-request


Merge conflicts:

https://opensource.com/article/23/4/resolve-git-merge-conflicts

https://www.javatpoint.com/git-merge-and-merge-conflict

==========================

Working with remote repositories:

https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

=============================

Git commands:

git clone
git log / git log --oneline
git status
git add
git commit
git push
git pull
git fork
git stash
git rebase 
git cherrypick
git fetch
git remote add
